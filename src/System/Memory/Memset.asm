; Copyright 2022 Raphtaliyah <me@raphtaliyah.moe>
;---------------------------------------------------------------------
; Module
;---------------------------------------------------------------------
    .module Memset
;---------------------------------------------------------------------
; Global symbols
;---------------------------------------------------------------------
    
;---------------------------------------------------------------------
; Includes
;---------------------------------------------------------------------
    .include \src/Headers/Memset.h.asm\
;---------------------------------------------------------------------
; Memory initializers
;---------------------------------------------------------------------
    .area INIT (CSEG)
    .area XINIT (CSEG)
;---------------------------------------------------------------------
; Memory
;---------------------------------------------------------------------
    .area BIT   (DSEG)
    .area DATA  (DSEG)
    .area XDATA (DSEG)
;---------------------------------------------------------------------
; Constant data
;---------------------------------------------------------------------
    .area CODE (CSEG)
;---------------------------------------------------------------------
; Constants
;---------------------------------------------------------------------
    
;---------------------------------------------------------------------
; Code
;---------------------------------------------------------------------
    .area CODE (CSEG)

;--------------------------------------------
; Fills an area of memory with a set value
;--------------------------------------------
; Parameters:
;   dptr  - Start address
;   r0:r1 - Length
;   r2    - Value
; Returns:
;   nothing
;--------------------------------------------
memset:
    push a
    push r0
    push r1
    push r2
    push dpl
    push dph
    
    ;TODO: Zero length!
    
    memsetLoop:
    mov  a,     r2  ; Set value
    movx @dptr, a
    inc  dptr       ; Next byte
    
    mov  a,  r0     ; Decrement r0:r1
    clr  c
    subb a,  #1
    mov  r0, a
    mov  a,  r1
    subb a,  #0
    mov  r1, a
    
    mov a, r0       ; Check if r0:r1 == 0, if not, go next
    jnz memsetLoop
    mov a, r1
    jnz memsetLoop
    
    pop dph
    pop dpl
    pop r2
    pop r1
    pop r0
    pop a
    ret